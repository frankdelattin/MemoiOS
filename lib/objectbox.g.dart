// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/image_vectors_box.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5908992832202756524),
      name: 'ImageVectorsBox',
      lastPropertyId: const obx_int.IdUid(7, 7514494939240520596),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3712759438537636508),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7058504694166166489),
            name: 'imageId',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(3, 8673467694969654572)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8899856586097855828),
            name: 'vectors',
            type: 28,
            flags: 8,
            indexId: const obx_int.IdUid(2, 4612633873467756555),
            hnswParams: obx_int.ModelHnswParams(
              dimensions: 768,
              indexingSearchCount: 200,
              distanceType: 10,
            )),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6652319062190346408),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3680644255042233867),
            name: 'dbStatus',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(5, 3822029451332487383)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7514494939240520596),
            name: 'imageModifiedDate',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(6, 9038493900948950150))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 5908992832202756524),
      lastIndexId: const obx_int.IdUid(6, 9038493900948950150),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [1782546292823893619, 4878951778600069285],
      retiredPropertyUids: const [143039642065804021],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ImageVectorsBox: obx_int.EntityDefinition<ImageVectorsBox>(
        model: _entities[0],
        toOneRelations: (ImageVectorsBox object) => [],
        toManyRelations: (ImageVectorsBox object) => {},
        getId: (ImageVectorsBox object) => object.id,
        setId: (ImageVectorsBox object, int id) {
          object.id = id;
        },
        objectToFB: (ImageVectorsBox object, fb.Builder fbb) {
          final imageIdOffset = fbb.writeString(object.imageId);
          final vectorsOffset = fbb.writeListFloat32(object.vectors);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imageIdOffset);
          fbb.addOffset(2, vectorsOffset);
          fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.dbStatus);
          fbb.addInt64(6, object.imageModifiedDate);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final imageIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final vectorsParam = const obx_int.Float32ListReader()
              .vTableGet(buffer, rootOffset, 8, Float32List(0));
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final imageModifiedDateParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = ImageVectorsBox(
              imageId: imageIdParam,
              vectors: vectorsParam,
              createdAt: createdAtParam,
              imageModifiedDate: imageModifiedDateParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbStatus = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ImageVectorsBox] entity fields to define ObjectBox queries.
class ImageVectorsBox_ {
  /// See [ImageVectorsBox.id].
  static final id =
      obx.QueryIntegerProperty<ImageVectorsBox>(_entities[0].properties[0]);

  /// See [ImageVectorsBox.imageId].
  static final imageId =
      obx.QueryStringProperty<ImageVectorsBox>(_entities[0].properties[1]);

  /// See [ImageVectorsBox.vectors].
  static final vectors =
      obx.QueryHnswProperty<ImageVectorsBox>(_entities[0].properties[2]);

  /// See [ImageVectorsBox.createdAt].
  static final createdAt =
      obx.QueryDateProperty<ImageVectorsBox>(_entities[0].properties[3]);

  /// See [ImageVectorsBox.dbStatus].
  static final dbStatus =
      obx.QueryIntegerProperty<ImageVectorsBox>(_entities[0].properties[4]);

  /// See [ImageVectorsBox.imageModifiedDate].
  static final imageModifiedDate =
      obx.QueryIntegerProperty<ImageVectorsBox>(_entities[0].properties[5]);
}
